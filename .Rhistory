hist(data)
library(rgl)
library(MASS)
library(rgl)
library(DepthProc)
library(hexbin)
library(aplpack)
library(robustbase)
library(MDBED)
library(roahd)
knitr::opts_chunk$set(echo = TRUE)
hist(data)
tukey_depth = depth(u = data, method = 'Tukey')
hist(data)
tukey_depth = depth(u = data, method = 'Tukey')
plot(tukey_depth)
hist(data)
tukey_depth = depth(u = data, method = 'Mahalanobis')
plot(tukey_depth)
hist(data)
boxplot(data)
data.obs = data
p = 0.95
q95.obs = quantile(data.obs, p)
q95.boot = numeric(B)
for(b in 1:B){
data.b <- sample(data.obs, replace = T)
q95.boot[b] = quantile(data.b, p)
}
plot(ecdf(q95.boot))
abline(v = q95.obs)
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
var.p=var(q95.boot.p)
var=var(q95.boot)
bias=mean(q95.boot)-q95.obs
RMSE=sqrt(var+bias^2)
var
bias
RMSE
alpha <- 0.05
right.quantile <- quantile(q95.boot, 1 - alpha/2)
left.quantile  <- quantile(q95.boot, alpha/2)
CI.RP <- c(q95.obs - (right.quantile - q95.obs), q95.obs, q95.obs - (left.quantile - q95.obs))
CI.RP
var = var(q95.boot)
var
bias = mean(q95.boot) - q95.obs
bias
RMSE = sqrt(var + bias^2)
RMSE
var = var(q95.boot)
var[1]
bias = mean(q95.boot) - q95.obs
bias[1]
RMSE = sqrt(var + bias^2)
RMSE
var = var(q95.boot)
var[[1]]
bias = mean(q95.boot) - q95.obs
bias[1]
RMSE = sqrt(var + bias^2)
RMSE
var = var(q95.boot)
var[[1]]
bias = mean(q95.boot) - q95.obs
bias[[[1]]]
var = var(q95.boot)
var[[1]]
bias = mean(q95.boot) - q95.obs
bias[[1]]
RMSE = sqrt(var + bias^2)
RMSE
var = var(q95.boot)
var[[1]]
bias = mean(q95.boot) - q95.obs
bias[[1]]
RMSE = sqrt(var + bias^2)
RMSE[[1]]
bias = mean(q95.boot) - q95.obs
bias[[1]]
var = var(q95.boot)
var[[1]]
RMSE = sqrt(var + bias^2)
RMSE[[1]]
right.quantile <- quantile(q95.boot, 1 - alpha/2)
left.quantile  <- quantile(q95.boot, alpha/2)
CI.RP <- c(
q95.obs - (right.quantile - q95.obs),
q95.obs,
q95.obs - (left.quantile - q95.obs)
)
CI.RP
library(lmPerm)
library(rgl)
library(roahd)
library(stabledist)
knitr::opts_chunk$set(echo = TRUE)
data = log(data)
hist(data)
shapiro.test(data)
# Transoform data and check gaussianity
data = log(data)
shapiro.test(data)
load("C:/Users/Asus/OneDrive - Politecnico di Milano/Università/Magistrale/SECONDO ANNO/Nonparametric Statistics/Laboratory/Dataset/water_level_data/water_level.rda")
data = water_level
n = dim(data)[1]
seed = 1221
alpha = 0.05
B = 1000
# Transoform data and check gaussianity
data = log(data)
shapiro.test(data)
q95.boot.p = numeric(B)
for(b in 1:B){
data.b <- exp(rnorm(n, mean, sd))
q95.boot.p[b] = quantile(data.b, 0.95)
}
mean = mean(data)
sd = sqrt(var(data))
q95.boot.p = numeric(B)
for(b in 1:B){
data.b <- exp(rnorm(n, mean, sd))
q95.boot.p[b] = quantile(data.b, 0.95)
}
norm_water_level=log(water_level)
hist(norm_water_level)
shapiro.test(norm_water_level)
mean=mean(norm_water_level)
sd=sqrt(var(norm_water_level))
n=length(norm_water_level)
q95.boot.p = numeric(B)
for(b in 1:B)
{
water.b <- exp(rnorm(n,mean,sd))
q95.boot.p[b] = quantile(water.b,0.95)
}
plot(ecdf(q95.boot.p))
abline(v = q95.obs)
mean = mean(data)
sd = sqrt(var(data))
n=length(data)
q95.boot.p = numeric(B)
for(b in 1:B){
data.b <- exp(rnorm(n, mean, sd))
q95.boot.p[b] = quantile(data.b, 0.95)
}
plot(ecdf(q95.boot.p))
abline(v = q95.obs)
bias = mean(q95.boot.p) - q95.obs
bias[[1]]
var = var(q95.boot.p)
var[[1]]
RMSE = sqrt(var + bias^2)
RMSE[[1]]
alpha <- 0.05
right.quantile <- quantile(q95.boot.p, 1 - alpha/2)
left.quantile  <- quantile(q95.boot.p, alpha/2)
CI.RP.p <- c(
q95.obs - (right.quantile - q95.obs),
q95.obs,
q95.obs - (left.quantile - q95.obs)
)
CI.RP.p
alpha <- 0.05
right.quantile <- quantile(q95.boot.p, 1 - alpha/2)
left.quantile  <- quantile(q95.boot.p, alpha/2)
CI.RP.p <- c(q95.obs - (right.quantile - q95.obs), q95.obs, q95.obs - (left.quantile - q95.obs))
CI.RP.p
knitr::opts_chunk$set(echo = TRUE)
shhh = function(lib_name){ # It's a library, so shhh!
suppressWarnings(suppressMessages(require(lib_name, character.only = TRUE)))
}
shhh("tidyverse")
shhh("ACutils")
shhh("mvtnorm")
shhh("salso")
shhh("FGM")
shhh("gmp")
shhh("mcclust")
shhh("mcclust.ext")
shhh("logr")
shhh("tidygraph")
shhh("ggraph")
shhh("igraph")
shhh("Rcpp")
shhh("RcppArmadillo")
shhh("RcppEigen")
## Load custom functions
source("utility_functions.R");
setwd("C:/Users/Asus/OneDrive - Politecnico di Milano/Università/Magistrale/SECONDO ANNO/Bayesian Statistics/Project/Codici/bayesian-statistics-project/functions")
shhh = function(lib_name){ # It's a library, so shhh!
suppressWarnings(suppressMessages(require(lib_name, character.only = TRUE)))
}
shhh("tidyverse")
shhh("ACutils")
shhh("mvtnorm")
shhh("salso")
shhh("FGM")
shhh("gmp")
shhh("mcclust")
shhh("mcclust.ext")
shhh("logr")
shhh("tidygraph")
shhh("ggraph")
shhh("igraph")
shhh("Rcpp")
shhh("RcppArmadillo")
shhh("RcppEigen")
## Load custom functions
source("utility_functions.R");
source("bulky_functions.R");
source("data_generation.R")
setwd("C:/Users/Asus/OneDrive - Politecnico di Milano/Università/Magistrale/SECONDO ANNO/Bayesian Statistics/Project/Codici/bayesian-statistics-project")
shhh = function(lib_name){ # It's a library, so shhh!
suppressWarnings(suppressMessages(require(lib_name, character.only = TRUE)))
}
shhh("tidyverse")
shhh("ACutils")
shhh("mvtnorm")
shhh("salso")
shhh("FGM")
shhh("gmp")
shhh("mcclust")
shhh("mcclust.ext")
shhh("logr")
shhh("tidygraph")
shhh("ggraph")
shhh("igraph")
shhh("Rcpp")
shhh("RcppArmadillo")
shhh("RcppEigen")
## Load custom functions
source("functions/utility_functions.R");
source("functinos/bulky_functions.R");
shhh = function(lib_name){ # It's a library, so shhh!
suppressWarnings(suppressMessages(require(lib_name, character.only = TRUE)))
}
shhh("tidyverse")
shhh("ACutils")
shhh("mvtnorm")
shhh("salso")
shhh("FGM")
shhh("gmp")
shhh("mcclust")
shhh("mcclust.ext")
shhh("logr")
shhh("tidygraph")
shhh("ggraph")
shhh("igraph")
shhh("Rcpp")
shhh("RcppArmadillo")
shhh("RcppEigen")
## Load custom functions
source("functions/utility_functions.R");
source("functions/bulky_functions.R");
source("functions/data_generation.R")
sourceCpp("functions/wade.cpp")
Rcpp::sourceCpp('functions/UpdateParamsGSL.cpp')
library('RcppGSL')
library(fda)
library(tidyverse)
saveRDS(sim_KG, file = sim_KG_path)
saveRDS(sim_KG, file = sim_KG_path)
# Libraries ---------------------------------------------------------------
library(BDgraph)
library(fda)
# Custom function ---------------------------------------------------------
#' Generate_BlockDiagonal
#' This function generate data by constructing a block diagonal matrix.
#' The idea is taken from Sun et at. (2014) -  Adaptive Variable Clustering in Gaussian Graphical Models
#' We add an edge between two variables with probability p_in if they are in the same cluster, otherwise with
#' probability p_out. The corresponding value of the precision matrix is set equal to elem_out. To ensure positive
#' definiteness, we increase its eigenvalues summing the absolute value of the minimum eigenvalue plus min_eigenval_correction
#' Given the precision matrix, the covariance matrix, the data and the graph are generate accordingly.
#' Note, the precision matrix is not drawn from a G-Wishart distribution
#' @param n [scalar] sample size
#' @param z_true [vector] cluster allocation vector
#' @param p_in [scalar] probability of having an edge between variables in the same cluster
#' @param p_out [scalar] probability of having an edge between variables in the different cluster
#' @param elem_out [scalar] value of elements of the precision matrix outside the diagonal
#' @param min_eigenval_correction [scalar] value to be added to the minimum eigenvalue
#' @param seed [integer] random seed
#'
#' @export
Generate_BlockDiagonal = function(n,
z_true,
p_in = 1,
p_out = 0,
elem_out = 5,
min_eigenval_correction = 3,
seed = 25254) {
set.seed(seed)
p = length(z_true) #set p
# Generate precision and covariance matrices
Omega = matrix(0,nrow = p,ncol = p)
for(i in 1:(p-1)){
for(j in (i+1):p){
if(z_true[i]==z_true[j]){
# draw with prob p_in
if(runif(n=1)<p_in)
Omega[i,j] = elem_out
}else{
# draw with prob p_out
if(runif(n=1)<p_out)
Omega[i,j] = elem_out
}
}
}
Omega = Omega + t(Omega) # define lower diagonal part
min_eig = eigen(Omega)$values[p] # compute eigenvalues, may be negative or 0
Omega_true = Omega + diag(x=abs(min_eig) + min_eigenval_correction,nrow = p)  # ensure positive definiteness
Sigma_true = solve(Omega_true) # compute covariance matrix
# Generate data
data = matrix(NA,nrow = n, ncol = p)
data = t(apply(data, 1, FUN = function(x){ mvtnorm::rmvnorm(n = 1, sigma = Sigma_true)  }))
U = t(data)%*%data
# Compute underlying graph
G = Omega_true
G[abs(G)>0] = 1
return(list("data"=data,"U"=U,"Prec"=Omega_true,"Cov"=Sigma_true,"Graph"=G))
}
# Data simulation ---------------------------------------------------------
# Set the seed
seed = 22111996
# Simulate a block graph
set.seed(seed)
p <- 40
Nclust = 3 # number of clusters
n_j = rep(floor(p/Nclust),Nclust) # cluster cardinalities
n_j[Nclust] = n_j[Nclust] + (p-sum(n_j)) # make sure n_j sums to p
z_true = rep(0,p)
inizio = c(1,cumsum(n_j)[1:(Nclust-1)]+1)
fine   = cumsum(n_j)
for(j in 1:Nclust){
z_true[ inizio[j]:fine[j] ] = j
}
sim_KG = Generate_BlockDiagonal(n = p, z_true = z_true, p_in = 1, p_out = 0, seed = seed,
elem_out = 100, min_eigenval_correction = 100)
K_true = sim_KG$Prec
ACutils::ACheatmap(
K_true,
use_x11_device = F,
horizontal = F,
main = "True Precision matrix",
center_value = NULL,
col.upper = "black",
col.center = "grey50",
col.lower = "white"
)
# Libraries ---------------------------------------------------------------
library(BDgraph)
library(fda)
shhh = function(lib_name){ # It's a library, so shhh!
suppressWarnings(suppressMessages(require(lib_name, character.only = TRUE)))
}
shhh("ACutils")
#' Note, the precision matrix is not drawn from a G-Wishart distribution
#' @param n [scalar] sample size
#' @param z_true [vector] cluster allocation vector
#' @param p_in [scalar] probability of having an edge between variables in the same cluster
#' @param p_out [scalar] probability of having an edge between variables in the different cluster
#' @param elem_out [scalar] value of elements of the precision matrix outside the diagonal
#' @param min_eigenval_correction [scalar] value to be added to the minimum eigenvalue
#' @param seed [integer] random seed
#'
#' @export
Generate_BlockDiagonal = function(n,
z_true,
p_in = 1,
p_out = 0,
elem_out = 5,
min_eigenval_correction = 3,
seed = 25254) {
set.seed(seed)
p = length(z_true) #set p
# Generate precision and covariance matrices
Omega = matrix(0,nrow = p,ncol = p)
for(i in 1:(p-1)){
for(j in (i+1):p){
if(z_true[i]==z_true[j]){
# draw with prob p_in
if(runif(n=1)<p_in)
Omega[i,j] = elem_out
}else{
# draw with prob p_out
if(runif(n=1)<p_out)
Omega[i,j] = elem_out
}
}
}
Omega = Omega + t(Omega) # define lower diagonal part
min_eig = eigen(Omega)$values[p] # compute eigenvalues, may be negative or 0
Omega_true = Omega + diag(x=abs(min_eig) + min_eigenval_correction,nrow = p)  # ensure positive definiteness
Sigma_true = solve(Omega_true) # compute covariance matrix
# Generate data
data = matrix(NA,nrow = n, ncol = p)
data = t(apply(data, 1, FUN = function(x){ mvtnorm::rmvnorm(n = 1, sigma = Sigma_true)  }))
U = t(data)%*%data
# Compute underlying graph
G = Omega_true
G[abs(G)>0] = 1
return(list("data"=data,"U"=U,"Prec"=Omega_true,"Cov"=Sigma_true,"Graph"=G))
}
# Set the seed
seed = 22111996
# Simulate a block graph
set.seed(seed)
p <- 40
Nclust = 3 # number of clusters
n_j = rep(floor(p/Nclust),Nclust) # cluster cardinalities
n_j[Nclust] = n_j[Nclust] + (p-sum(n_j)) # make sure n_j sums to p
z_true = rep(0,p)
inizio = c(1,cumsum(n_j)[1:(Nclust-1)]+1)
fine   = cumsum(n_j)
for(j in 1:Nclust){
z_true[ inizio[j]:fine[j] ] = j
}
sim_KG = Generate_BlockDiagonal(n = p, z_true = z_true, p_in = 1, p_out = 0, seed = seed,
elem_out = 100, min_eigenval_correction = 100)
K_true = sim_KG$Prec
ACutils::ACheatmap(
K_true,
use_x11_device = F,
horizontal = F,
main = "True Precision matrix",
center_value = NULL,
col.upper = "black",
col.center = "grey50",
col.lower = "white"
)
ACutils::ACheatmap(
sim_KG$Cov,
use_x11_device = F,
horizontal = F,
main = "True Precision matrix",
center_value = NULL,
col.upper = "black",
col.center = "grey50",
col.lower = "white"
)
install.packages("ACutils")
library(BDgraph)
library(fda)
#' Note, the precision matrix is not drawn from a G-Wishart distribution
#' @param n [scalar] sample size
#' @param z_true [vector] cluster allocation vector
#' @param p_in [scalar] probability of having an edge between variables in the same cluster
#' @param p_out [scalar] probability of having an edge between variables in the different cluster
#' @param elem_out [scalar] value of elements of the precision matrix outside the diagonal
#' @param min_eigenval_correction [scalar] value to be added to the minimum eigenvalue
#' @param seed [integer] random seed
#'
#' @export
Generate_BlockDiagonal = function(n,
z_true,
p_in = 1,
p_out = 0,
elem_out = 5,
min_eigenval_correction = 3,
seed = 25254) {
set.seed(seed)
p = length(z_true) #set p
# Generate precision and covariance matrices
Omega = matrix(0,nrow = p,ncol = p)
for(i in 1:(p-1)){
for(j in (i+1):p){
if(z_true[i]==z_true[j]){
# draw with prob p_in
if(runif(n=1)<p_in)
Omega[i,j] = elem_out
}else{
# draw with prob p_out
if(runif(n=1)<p_out)
Omega[i,j] = elem_out
}
}
}
Omega = Omega + t(Omega) # define lower diagonal part
min_eig = eigen(Omega)$values[p] # compute eigenvalues, may be negative or 0
Omega_true = Omega + diag(x=abs(min_eig) + min_eigenval_correction,nrow = p)  # ensure positive definiteness
Sigma_true = solve(Omega_true) # compute covariance matrix
# Generate data
data = matrix(NA,nrow = n, ncol = p)
data = t(apply(data, 1, FUN = function(x){ mvtnorm::rmvnorm(n = 1, sigma = Sigma_true)  }))
U = t(data)%*%data
# Compute underlying graph
G = Omega_true
G[abs(G)>0] = 1
return(list("data"=data,"U"=U,"Prec"=Omega_true,"Cov"=Sigma_true,"Graph"=G))
}
# Set the seed
seed = 22111996
# Simulate a block graph
set.seed(seed)
p <- 40
Nclust = 3 # number of clusters
n_j = rep(floor(p/Nclust),Nclust) # cluster cardinalities
n_j[Nclust] = n_j[Nclust] + (p-sum(n_j)) # make sure n_j sums to p
z_true = rep(0,p)
inizio = c(1,cumsum(n_j)[1:(Nclust-1)]+1)
fine   = cumsum(n_j)
for(j in 1:Nclust){
z_true[ inizio[j]:fine[j] ] = j
}
sim_KG = Generate_BlockDiagonal(n = p, z_true = z_true, p_in = 1, p_out = 0, seed = seed,
elem_out = 100, min_eigenval_correction = 100)
# Simulate the beta coefficients given the precision matrix
n <- 300
x_mu <- seq(0, 1, length.out=p)
mu_true = ACutils::dmix(x = x_mu, w_j = c(0.9,0.1), mu_vec = c(0.3,0.8), sigma_vec = c(0.1,0.05))
